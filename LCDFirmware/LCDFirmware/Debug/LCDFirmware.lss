
LCDFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000362  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fbc  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000951  00000000  00000000  00002781  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 94 01 	call	0x328	; 0x328 <main>
  8e:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  96:	e4 e6       	ldi	r30, 0x64	; 100
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
  a0:	ec eb       	ldi	r30, 0xBC	; 188
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	80 83       	st	Z, r24
  aa:	e9 eb       	ldi	r30, 0xB9	; 185
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	80 83       	st	Z, r24
  b4:	88 e4       	ldi	r24, 0x48	; 72
  b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ba:	08 95       	ret

000000bc <twi_start>:
  bc:	84 ea       	ldi	r24, 0xA4	; 164
  be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <twi_start+0xa>
  cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <twi_start+0x24>
  e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ea:	08 95       	ret

000000ec <twi_write>:
  ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f6:	ec eb       	ldi	r30, 0xBC	; 188
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <twi_write+0xe>
 100:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 104:	08 95       	ret

00000106 <LCD_write>:
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	c8 2f       	mov	r28, r24
 10e:	16 2f       	mov	r17, r22
 110:	0e 94 5e 00 	call	0xbc	; 0xbc <twi_start>
 114:	dc 2f       	mov	r29, r28
 116:	d0 7f       	andi	r29, 0xF0	; 240
 118:	dc 60       	ori	r29, 0x0C	; 12
 11a:	11 11       	cpse	r17, r1
 11c:	19 c0       	rjmp	.+50     	; 0x150 <LCD_write+0x4a>
 11e:	8d 2f       	mov	r24, r29
 120:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_write+0x22>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_write+0x28>
 12e:	00 00       	nop
 130:	8d 2f       	mov	r24, r29
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_write+0x36>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_write+0x3c>
 142:	00 00       	nop
 144:	8c 2f       	mov	r24, r28
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	c8 2f       	mov	r28, r24
 14c:	cc 60       	ori	r28, 0x0C	; 12
 14e:	1b c0       	rjmp	.+54     	; 0x186 <LCD_write+0x80>
 150:	8d 2f       	mov	r24, r29
 152:	81 60       	ori	r24, 0x01	; 1
 154:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_write+0x56>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_write+0x5c>
 162:	00 00       	nop
 164:	8d 2f       	mov	r24, r29
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_write+0x6c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_write+0x72>
 178:	00 00       	nop
 17a:	20 e1       	ldi	r18, 0x10	; 16
 17c:	c2 9f       	mul	r28, r18
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	c8 2f       	mov	r28, r24
 184:	cd 60       	ori	r28, 0x0D	; 13
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 18c:	8f e9       	ldi	r24, 0x9F	; 159
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_write+0x8a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_write+0x90>
 196:	00 00       	nop
 198:	8c 2f       	mov	r24, r28
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	0e 94 76 00 	call	0xec	; 0xec <twi_write>
 1a0:	8f e9       	ldi	r24, 0x9F	; 159
 1a2:	9f e0       	ldi	r25, 0x0F	; 15
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_write+0x9e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_write+0xa4>
 1aa:	00 00       	nop
 1ac:	84 e9       	ldi	r24, 0x94	; 148
 1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	08 95       	ret

000001ba <LCD_cmd>:
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 83 00 	call	0x106	; 0x106 <LCD_write>
 1c0:	08 95       	ret

000001c2 <LCD_char>:
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_write>
 1c8:	08 95       	ret

000001ca <LCD_init>:
 1ca:	0e 94 4b 00 	call	0x96	; 0x96 <twi_init>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 ef       	ldi	r24, 0xF9	; 249
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <LCD_init+0xa>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_init+0x14>
 1de:	00 00       	nop
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	9e e4       	ldi	r25, 0x4E	; 78
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_init+0x20>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_init+0x26>
 1f0:	00 00       	nop
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_init+0x32>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_init+0x38>
 202:	00 00       	nop
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 20a:	8f e9       	ldi	r24, 0x9F	; 159
 20c:	9f e0       	ldi	r25, 0x0F	; 15
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_init+0x44>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_init+0x4a>
 214:	00 00       	nop
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 22e:	08 95       	ret

00000230 <LCD_str>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	31 f0       	breq	.+12     	; 0x248 <LCD_str+0x18>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_char>
 242:	89 91       	ld	r24, Y+
 244:	81 11       	cpse	r24, r1
 246:	fb cf       	rjmp	.-10     	; 0x23e <LCD_str+0xe>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_clr+0xa>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_clr+0x10>
 25e:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 266:	08 95       	ret

00000268 <LCD_wake>:
}

void LCD_wake() {
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	LCD_clr();
 26e:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_clr>
	LCD_cmd(0x80); //1st line
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 278:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 27a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_clr>
		LCD_cmd(0x80); //1st line
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 284:	c0 e1       	ldi	r28, 0x10	; 16
 286:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_char>
 28e:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 290:	d9 f7       	brne	.-10     	; 0x288 <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 298:	c0 e1       	ldi	r28, 0x10	; 16
 29a:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_char>
 2a2:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 2a4:	d9 f7       	brne	.-10     	; 0x29c <LCD_wake+0x34>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	86 e1       	ldi	r24, 0x16	; 22
 2aa:	91 e1       	ldi	r25, 0x11	; 17
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <LCD_wake+0x44>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_wake+0x4e>
 2b6:	00 00       	nop
 2b8:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 2ba:	16 3b       	cpi	r17, 0xB6	; 182
 2bc:	f1 f6       	brne	.-68     	; 0x27a <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 2c4:	c0 e1       	ldi	r28, 0x10	; 16
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_char>
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	86 e7       	ldi	r24, 0x76	; 118
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <LCD_wake+0x6c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_wake+0x76>
 2de:	00 00       	nop
 2e0:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 2e2:	91 f7       	brne	.-28     	; 0x2c8 <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
 2ea:	c0 e1       	ldi	r28, 0x10	; 16
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_char>
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	86 e7       	ldi	r24, 0x76	; 118
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <LCD_wake+0x92>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_wake+0x9c>
 304:	00 00       	nop
 306:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 308:	91 f7       	brne	.-28     	; 0x2ee <LCD_wake+0x86>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	83 ed       	ldi	r24, 0xD3	; 211
 30e:	90 e3       	ldi	r25, 0x30	; 48
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <LCD_wake+0xa8>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_wake+0xb2>
 31a:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 31c:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_clr>
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	08 95       	ret

00000328 <main>:

int main(void)
{
	LCD_init();			/* Initialization of LCD, twi_init() is called here */
 328:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_init>
    LCD_wake();			/* Wake function to test LCD functionality */
 32c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_wake>
	LCD_str("Made by Vincent");
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 18 01 	call	0x230	; 0x230 <LCD_str>
	LCD_cmd(0xC0);
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_cmd>
	LCD_str("And Nick!");
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 18 01 	call	0x230	; 0x230 <LCD_str>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	89 e6       	ldi	r24, 0x69	; 105
 34a:	98 e1       	ldi	r25, 0x18	; 24
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x24>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x2e>
 356:	00 00       	nop
	_delay_ms(500);
	LCD_clr();
 358:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_clr>
 35c:	ff cf       	rjmp	.-2      	; 0x35c <main+0x34>

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
