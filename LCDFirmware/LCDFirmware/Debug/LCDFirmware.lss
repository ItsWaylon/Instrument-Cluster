
LCDFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080011a  0080011a  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d8  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000627  00000000  00000000  00001df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e9  00000000  00000000  00002a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  9e:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <LCD_write>:
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	d8 2f       	mov	r29, r24
 11e:	16 2f       	mov	r17, r22
 120:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 124:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 128:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <LCD_BL_PORT>
 12c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LCD_E_PORT>
 130:	c8 2b       	or	r28, r24
 132:	9d 2f       	mov	r25, r29
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	8c 2f       	mov	r24, r28
 138:	89 2b       	or	r24, r25
 13a:	11 11       	cpse	r17, r1
 13c:	05 c0       	rjmp	.+10     	; 0x148 <LCD_write+0x32>
 13e:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <LCD_RS_PORT>
 142:	c0 95       	com	r28
 144:	c8 23       	and	r28, r24
 146:	03 c0       	rjmp	.+6      	; 0x14e <LCD_write+0x38>
 148:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <LCD_RS_PORT>
 14c:	c8 2b       	or	r28, r24
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 154:	8f e9       	ldi	r24, 0x9F	; 159
 156:	9f e0       	ldi	r25, 0x0F	; 15
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_write+0x42>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_write+0x48>
 15e:	00 00       	nop
 160:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LCD_E_PORT>
 164:	80 95       	com	r24
 166:	8c 23       	and	r24, r28
 168:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_write+0x5a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_write+0x60>
 176:	00 00       	nop
 178:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <LCD_BL_PORT>
 17c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LCD_E_PORT>
 180:	c8 2b       	or	r28, r24
 182:	20 e1       	ldi	r18, 0x10	; 16
 184:	d2 9f       	mul	r29, r18
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	8c 2b       	or	r24, r28
 18c:	11 11       	cpse	r17, r1
 18e:	05 c0       	rjmp	.+10     	; 0x19a <LCD_write+0x84>
 190:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <LCD_RS_PORT>
 194:	c0 95       	com	r28
 196:	c8 23       	and	r28, r24
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <LCD_write+0x8a>
 19a:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <LCD_RS_PORT>
 19e:	c8 2b       	or	r28, r24
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_write+0x94>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_write+0x9a>
 1b0:	00 00       	nop
 1b2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LCD_E_PORT>
 1b6:	80 95       	com	r24
 1b8:	8c 23       	and	r24, r28
 1ba:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_write+0xac>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_write+0xb2>
 1c8:	00 00       	nop
 1ca:	84 e9       	ldi	r24, 0x94	; 148
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	08 95       	ret

000001d8 <LCD_cmd>:
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_write>
 1de:	08 95       	ret

000001e0 <LCD_char>:
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_write>
 1e6:	08 95       	ret

000001e8 <LCD_init>:
 1e8:	af 92       	push	r10
 1ea:	cf 92       	push	r12
 1ec:	ef 92       	push	r14
 1ee:	0f 93       	push	r16
 1f0:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <LCD_RS_PORT>
 1f4:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <LCD_E_PORT>
 1f8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <LCD_BL_PORT>
 1fc:	00 93 21 01 	sts	0x0121, r16	; 0x800121 <LCD_D4_PORT>
 200:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <LCD_D5_PORT>
 204:	c0 92 1b 01 	sts	0x011B, r12	; 0x80011b <LCD_D6_PORT>
 208:	a0 92 1c 01 	sts	0x011C, r10	; 0x80011c <LCD_D7_PORT>
 20c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <LCD_init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_init+0x3c>
 224:	00 00       	nop
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_init+0x48>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_init+0x4e>
 236:	00 00       	nop
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_init+0x5a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_init+0x60>
 248:	00 00       	nop
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 250:	8f e9       	ldi	r24, 0x9F	; 159
 252:	9f e0       	ldi	r25, 0x0F	; 15
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_init+0x6c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_init+0x72>
 25a:	00 00       	nop
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 274:	0f 91       	pop	r16
 276:	ef 90       	pop	r14
 278:	cf 90       	pop	r12
 27a:	af 90       	pop	r10
 27c:	08 95       	ret

0000027e <LCD_str>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	88 81       	ld	r24, Y
 286:	88 23       	and	r24, r24
 288:	31 f0       	breq	.+12     	; 0x296 <LCD_str+0x18>
 28a:	21 96       	adiw	r28, 0x01	; 1
 28c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_char>
 290:	89 91       	ld	r24, Y+
 292:	81 11       	cpse	r24, r1
 294:	fb cf       	rjmp	.-10     	; 0x28c <LCD_str+0xe>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	9f e1       	ldi	r25, 0x1F	; 31
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_clr+0xa>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_clr+0x10>
 2ac:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 2b4:	08 95       	ret

000002b6 <LCD_wake>:
}

void LCD_wake() {
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	LCD_clr();
 2bc:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_clr>
	LCD_cmd(0x80); //1st line
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 2c6:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 2c8:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_clr>
		LCD_cmd(0x80); //1st line
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 2d2:	c0 e1       	ldi	r28, 0x10	; 16
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 2d6:	81 2f       	mov	r24, r17
 2d8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_char>
 2dc:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 2de:	d9 f7       	brne	.-10     	; 0x2d6 <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 2e0:	80 ec       	ldi	r24, 0xC0	; 192
 2e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 2e6:	c0 e1       	ldi	r28, 0x10	; 16
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 2ea:	81 2f       	mov	r24, r17
 2ec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_char>
 2f0:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 2f2:	d9 f7       	brne	.-10     	; 0x2ea <LCD_wake+0x34>
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	86 e1       	ldi	r24, 0x16	; 22
 2f8:	91 e1       	ldi	r25, 0x11	; 17
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <LCD_wake+0x44>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_wake+0x4e>
 304:	00 00       	nop
 306:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 308:	16 3b       	cpi	r17, 0xB6	; 182
 30a:	f1 f6       	brne	.-68     	; 0x2c8 <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 312:	c0 e1       	ldi	r28, 0x10	; 16
 314:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_char>
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	86 e7       	ldi	r24, 0x76	; 118
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <LCD_wake+0x6c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <LCD_wake+0x76>
 32c:	00 00       	nop
 32e:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 330:	91 f7       	brne	.-28     	; 0x316 <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 332:	80 ec       	ldi	r24, 0xC0	; 192
 334:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
 338:	c0 e1       	ldi	r28, 0x10	; 16
 33a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_char>
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	86 e7       	ldi	r24, 0x76	; 118
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <LCD_wake+0x92>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_wake+0x9c>
 352:	00 00       	nop
 354:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 356:	91 f7       	brne	.-28     	; 0x33c <LCD_wake+0x86>
 358:	2f ef       	ldi	r18, 0xFF	; 255
 35a:	83 ed       	ldi	r24, 0xD3	; 211
 35c:	90 e3       	ldi	r25, 0x30	; 48
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <LCD_wake+0xa8>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_wake+0xb2>
 368:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 36a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_clr>
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	08 95       	ret

00000376 <main>:
//twi_start(uint8_t) needs i2c_address
//twi_write(uint8_t) needs a byte

int main(void)
{
	LCD_init(I2C_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);			/* Initialization of LCD, twi_init() is called here. ptr to the lcd port array is passed */
 376:	68 94       	set
 378:	aa 24       	eor	r10, r10
 37a:	a7 f8       	bld	r10, 7
 37c:	68 94       	set
 37e:	cc 24       	eor	r12, r12
 380:	c6 f8       	bld	r12, 6
 382:	68 94       	set
 384:	ee 24       	eor	r14, r14
 386:	e5 f8       	bld	r14, 5
 388:	00 e1       	ldi	r16, 0x10	; 16
 38a:	28 e0       	ldi	r18, 0x08	; 8
 38c:	44 e0       	ldi	r20, 0x04	; 4
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	87 e2       	ldi	r24, 0x27	; 39
 392:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_init>
    LCD_wake();			/* Wake function to test LCD functionality */
 396:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_wake>
	LCD_str("Made by Vincent");
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_str>
	LCD_cmd(0xC0);
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
	LCD_str("And Nick!");
 3a8:	80 e1       	ldi	r24, 0x10	; 16
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_str>
 3b0:	2f ef       	ldi	r18, 0xFF	; 255
 3b2:	89 e6       	ldi	r24, 0x69	; 105
 3b4:	98 e1       	ldi	r25, 0x18	; 24
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x40>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x4a>
 3c0:	00 00       	nop
	_delay_ms(500);
	LCD_clr();
 3c2:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_clr>
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <main+0x50>

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
