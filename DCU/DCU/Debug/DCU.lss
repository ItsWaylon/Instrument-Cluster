
DCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         0000000e  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af3  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000469  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000330  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002462  2**0
=======
  0 .data         00000014  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800114  00800114  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9a  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a2  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057c  00000000  00000000  00002a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002ffa  2**0
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
<<<<<<< HEAD
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
=======
  10:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_4>
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
<<<<<<< HEAD
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_14>
=======
  2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
=======
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
<<<<<<< HEAD
  8c:	ae e0       	ldi	r26, 0x0E	; 14
=======
  8c:	a4 e1       	ldi	r26, 0x14	; 20
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
<<<<<<< HEAD
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  9e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>
=======
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 31 02 	call	0x462	; 0x462 <main>
  9e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

<<<<<<< HEAD
000000a6 <twi_start>:
	twi_stop();
	
	twi_start(0x21);
	twi_write(byte2);
	twi_stop();
}
  a6:	94 ea       	ldi	r25, 0xA4	; 164
  a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	99 23       	and	r25, r25
  b4:	ec f7       	brge	.-6      	; 0xb0 <twi_start+0xa>
  b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ba:	88 0f       	add	r24, r24
  bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  c6:	ec eb       	ldi	r30, 0xBC	; 188
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 23       	and	r24, r24
  ce:	ec f7       	brge	.-6      	; 0xca <twi_start+0x24>
  d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  d4:	08 95       	ret

000000d6 <twi_write>:
  d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <twi_write+0xe>
  ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ee:	08 95       	ret

000000f0 <__vector_14>:
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	9f 92       	push	r9
  fc:	af 92       	push	r10
  fe:	bf 92       	push	r11
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
 128:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 12c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 136:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 13a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 13e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 142:	84 36       	cpi	r24, 0x64	; 100
 144:	91 05       	cpc	r25, r1
 146:	0c f4       	brge	.+2      	; 0x14a <__vector_14+0x5a>
 148:	6b c0       	rjmp	.+214    	; 0x220 <__vector_14+0x130>
 14a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 14e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 152:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_start>
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 168:	0e 94 6b 00 	call	0xd6	; 0xd6 <twi_write>
 16c:	84 e9       	ldi	r24, 0x94	; 148
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 172:	56 c0       	rjmp	.+172    	; 0x220 <__vector_14+0x130>
 174:	f7 01       	movw	r30, r14
 176:	21 91       	ld	r18, Z+
 178:	31 91       	ld	r19, Z+
 17a:	7f 01       	movw	r14, r30
 17c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 180:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 184:	28 17       	cp	r18, r24
 186:	39 07       	cpc	r19, r25
 188:	e1 f4       	brne	.+56     	; 0x1c2 <__vector_14+0xd2>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 192:	95 01       	movw	r18, r10
 194:	0c 2e       	mov	r0, r28
 196:	02 c0       	rjmp	.+4      	; 0x19c <__vector_14+0xac>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <__vector_14+0xa8>
 1a0:	82 2b       	or	r24, r18
 1a2:	93 2b       	or	r25, r19
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_start>
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <twi_write>
 1be:	f6 01       	movw	r30, r12
 1c0:	90 82       	st	Z, r9
 1c2:	f8 01       	movw	r30, r16
 1c4:	21 91       	ld	r18, Z+
 1c6:	31 91       	ld	r19, Z+
 1c8:	8f 01       	movw	r16, r30
 1ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	f1 f4       	brne	.+60     	; 0x214 <__vector_14+0x124>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	9e 01       	movw	r18, r28
 1e2:	2b 5f       	subi	r18, 0xFB	; 251
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	a5 01       	movw	r20, r10
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__vector_14+0xfe>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <__vector_14+0xfa>
 1f2:	84 2b       	or	r24, r20
 1f4:	95 2b       	or	r25, r21
 1f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_start>
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	0e 94 6b 00 	call	0xd6	; 0xd6 <twi_write>
 210:	f6 01       	movw	r30, r12
 212:	90 82       	st	Z, r9
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	c3 30       	cpi	r28, 0x03	; 3
 218:	d1 05       	cpc	r29, r1
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_14+0x12e>
 21c:	ab cf       	rjmp	.-170    	; 0x174 <__vector_14+0x84>
 21e:	17 c0       	rjmp	.+46     	; 0x24e <__vector_14+0x15e>
 220:	0f 2e       	mov	r0, r31
 222:	f8 e0       	ldi	r31, 0x08	; 8
 224:	ef 2e       	mov	r14, r31
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	ff 2e       	mov	r15, r31
 22a:	f0 2d       	mov	r31, r0
 22c:	02 e0       	ldi	r16, 0x02	; 2
 22e:	11 e0       	ldi	r17, 0x01	; 1
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	aa 24       	eor	r10, r10
 236:	a3 94       	inc	r10
 238:	b1 2c       	mov	r11, r1
 23a:	0f 2e       	mov	r0, r31
 23c:	fc eb       	ldi	r31, 0xBC	; 188
 23e:	cf 2e       	mov	r12, r31
 240:	d1 2c       	mov	r13, r1
 242:	f0 2d       	mov	r31, r0
 244:	0f 2e       	mov	r0, r31
 246:	f4 e9       	ldi	r31, 0x94	; 148
 248:	9f 2e       	mov	r9, r31
 24a:	f0 2d       	mov	r31, r0
 24c:	93 cf       	rjmp	.-218    	; 0x174 <__vector_14+0x84>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	af 90       	pop	r10
 27a:	9f 90       	pop	r9
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <main>:
#include <util/twi.h>
#include "i2c.h"
#include "led.h"

enum state{state_wake, state_main, state_settings, state_debug,};
int main(void) {
 286:	ff cf       	rjmp	.-2      	; 0x286 <main>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
=======
000000a6 <twi_init>:
	TCCR1B |= (1 << WGM12);
	// Set CS12, CS11 and CS10 bits for 1 prescaler
	TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10);
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
	sei(); // allow interrupts
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <__vector_14>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timerTick>
 152:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timerTick+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timerTick+0x1>
 15c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timerTick>
 160:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timerTick>
 164:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timerTick+0x1>
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <__vector_14+0x5a>
 16e:	6b c0       	rjmp	.+214    	; 0x246 <__vector_14+0x130>
 170:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <timerTick+0x1>
 174:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timerTick>
 178:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bitstate+0x1>
 17c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <bitstate>
 180:	80 e2       	ldi	r24, 0x20	; 32
 182:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 186:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bitstate>
 18a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bitstate+0x1>
 18e:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 198:	56 c0       	rjmp	.+172    	; 0x246 <__vector_14+0x130>
 19a:	f7 01       	movw	r30, r14
 19c:	21 91       	ld	r18, Z+
 19e:	31 91       	ld	r19, Z+
 1a0:	7f 01       	movw	r14, r30
 1a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timerTick>
 1a6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timerTick+0x1>
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	e1 f4       	brne	.+56     	; 0x1e8 <__vector_14+0xd2>
 1b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bitstate>
 1b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bitstate+0x1>
 1b8:	95 01       	movw	r18, r10
 1ba:	0c 2e       	mov	r0, r28
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_14+0xac>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <__vector_14+0xa8>
 1c6:	82 2b       	or	r24, r18
 1c8:	93 2b       	or	r25, r19
 1ca:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bitstate+0x1>
 1ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bitstate>
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 1d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bitstate>
 1dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bitstate+0x1>
 1e0:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 1e4:	f6 01       	movw	r30, r12
 1e6:	90 82       	st	Z, r9
 1e8:	f8 01       	movw	r30, r16
 1ea:	21 91       	ld	r18, Z+
 1ec:	31 91       	ld	r19, Z+
 1ee:	8f 01       	movw	r16, r30
 1f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timerTick>
 1f4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timerTick+0x1>
 1f8:	28 17       	cp	r18, r24
 1fa:	39 07       	cpc	r19, r25
 1fc:	f1 f4       	brne	.+60     	; 0x23a <__vector_14+0x124>
 1fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bitstate>
 202:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bitstate+0x1>
 206:	9e 01       	movw	r18, r28
 208:	2b 5f       	subi	r18, 0xFB	; 251
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	a5 01       	movw	r20, r10
 20e:	02 c0       	rjmp	.+4      	; 0x214 <__vector_14+0xfe>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <__vector_14+0xfa>
 218:	84 2b       	or	r24, r20
 21a:	95 2b       	or	r25, r21
 21c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bitstate+0x1>
 220:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bitstate>
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bitstate>
 22e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bitstate+0x1>
 232:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 236:	f6 01       	movw	r30, r12
 238:	90 82       	st	Z, r9
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c3 30       	cpi	r28, 0x03	; 3
 23e:	d1 05       	cpc	r29, r1
 240:	09 f0       	breq	.+2      	; 0x244 <__vector_14+0x12e>
 242:	ab cf       	rjmp	.-170    	; 0x19a <__vector_14+0x84>
 244:	17 c0       	rjmp	.+46     	; 0x274 <__vector_14+0x15e>
 246:	0f 2e       	mov	r0, r31
 248:	fe e0       	ldi	r31, 0x0E	; 14
 24a:	ef 2e       	mov	r14, r31
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	ff 2e       	mov	r15, r31
 250:	f0 2d       	mov	r31, r0
 252:	08 e0       	ldi	r16, 0x08	; 8
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	aa 24       	eor	r10, r10
 25c:	a3 94       	inc	r10
 25e:	b1 2c       	mov	r11, r1
 260:	0f 2e       	mov	r0, r31
 262:	fc eb       	ldi	r31, 0xBC	; 188
 264:	cf 2e       	mov	r12, r31
 266:	d1 2c       	mov	r13, r1
 268:	f0 2d       	mov	r31, r0
 26a:	0f 2e       	mov	r0, r31
 26c:	f4 e9       	ldi	r31, 0x94	; 148
 26e:	9f 2e       	mov	r9, r31
 270:	f0 2d       	mov	r31, r0
 272:	93 cf       	rjmp	.-218    	; 0x19a <__vector_14+0x84>
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	af 90       	pop	r10
 2a0:	9f 90       	pop	r9
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <timer_Init>:
 2ac:	14 bc       	out	0x24, r1	; 36
 2ae:	15 bc       	out	0x25, r1	; 37
 2b0:	16 bc       	out	0x26, r1	; 38
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	87 bd       	out	0x27, r24	; 39
 2b6:	85 b5       	in	r24, 0x25	; 37
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	85 bd       	out	0x25, r24	; 37
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	85 bd       	out	0x25, r24	; 37
 2c2:	ee e6       	ldi	r30, 0x6E	; 110
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
 2cc:	78 94       	sei
 2ce:	08 95       	ret

000002d0 <rgb_set>:
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	91 05       	cpc	r25, r1
 2d4:	19 f0       	breq	.+6      	; 0x2dc <rgb_set+0xc>
 2d6:	02 97       	sbiw	r24, 0x02	; 2
 2d8:	a1 f0       	breq	.+40     	; 0x302 <rgb_set+0x32>
 2da:	08 95       	ret
 2dc:	ee e0       	ldi	r30, 0x0E	; 14
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	db 01       	movw	r26, r22
 2e2:	8c 91       	ld	r24, X
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	91 83       	std	Z+1, r25	; 0x01
 2e8:	80 83       	st	Z, r24
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	8c 91       	ld	r24, X
 2ee:	11 97       	sbiw	r26, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	93 83       	std	Z+3, r25	; 0x03
 2f4:	82 83       	std	Z+2, r24	; 0x02
 2f6:	12 96       	adiw	r26, 0x02	; 2
 2f8:	8c 91       	ld	r24, X
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	95 83       	std	Z+5, r25	; 0x05
 2fe:	84 83       	std	Z+4, r24	; 0x04
 300:	08 95       	ret
 302:	e8 e0       	ldi	r30, 0x08	; 8
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	db 01       	movw	r26, r22
 308:	8c 91       	ld	r24, X
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	91 83       	std	Z+1, r25	; 0x01
 30e:	80 83       	st	Z, r24
 310:	11 96       	adiw	r26, 0x01	; 1
 312:	8c 91       	ld	r24, X
 314:	11 97       	sbiw	r26, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	93 83       	std	Z+3, r25	; 0x03
 31a:	82 83       	std	Z+2, r24	; 0x02
 31c:	12 96       	adiw	r26, 0x02	; 2
 31e:	8c 91       	ld	r24, X
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	95 83       	std	Z+5, r25	; 0x05
 324:	84 83       	std	Z+4, r24	; 0x04
 326:	08 95       	ret

00000328 <rpm_write>:
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	c8 2f       	mov	r28, r24
 332:	09 2f       	mov	r16, r25
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 338:	80 e2       	ldi	r24, 0x20	; 32
 33a:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 33e:	8c 2f       	mov	r24, r28
 340:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 344:	cc eb       	ldi	r28, 0xBC	; 188
 346:	d0 e0       	ldi	r29, 0x00	; 0
 348:	14 e9       	ldi	r17, 0x94	; 148
 34a:	18 83       	st	Y, r17
 34c:	81 e2       	ldi	r24, 0x21	; 33
 34e:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 352:	80 2f       	mov	r24, r16
 354:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 358:	18 83       	st	Y, r17
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
	milliseconds++;
 376:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 37a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 37e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 382:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	a1 1d       	adc	r26, r1
 38a:	b1 1d       	adc	r27, r1
 38c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 390:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 394:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 398:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	
}
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <button_function_0>:

void button_function_0(void)
{
	if(button_flag[0] == 1)
 3ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <button_flag>
 3b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <button_flag+0x1>
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	21 f4       	brne	.+8      	; 0x3c2 <button_function_0+0x14>
	{
		//INSERT button function here
		button_flag[0] = 0;
 3ba:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <button_flag+0x1>
 3be:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <button_flag>
 3c2:	08 95       	ret

000003c4 <button_function_1>:
	}
}

void button_function_1(void)
{
	if(button_flag[1] == 1)
 3c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <button_flag+0x2>
 3c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <button_flag+0x3>
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <button_function_1+0x14>
	{
		//INSERT button function here
		button_flag[1] = 0;
 3d0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <button_flag+0x3>
 3d4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <button_flag+0x2>
 3d8:	08 95       	ret

000003da <button_function_2>:
}


void button_function_2(void)
{
	if(button_flag[2] == 1)
 3da:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <button_flag+0x4>
 3de:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <button_flag+0x5>
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	21 f4       	brne	.+8      	; 0x3ee <button_function_2+0x14>
	{
		//INSERT button function here
		button_flag[2] = 0;
 3e6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <button_flag+0x5>
 3ea:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <button_flag+0x4>
 3ee:	08 95       	ret

000003f0 <button_function_3>:
}


void button_function_3(void)
{
	if(button_flag[3] == 1)
 3f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <button_flag+0x6>
 3f4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <button_flag+0x7>
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	21 f4       	brne	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		//INSERT button function here
		button_flag[3] = 0;
 3fc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <button_flag+0x7>
 400:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <button_flag+0x6>
 404:	08 95       	ret

00000406 <__vector_4>:
	}
}

//INTERUPT for buttons
ISR(PCINT1_vect)
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
	if (!(PINC & (1<<PINC0))) //NOTE: The setup used to create this has the buttons pulled off when not pressed. Change logic if this is not the case.
 414:	30 99       	sbic	0x06, 0	; 6
 416:	06 c0       	rjmp	.+12     	; 0x424 <__vector_4+0x1e>
	{
		button_flag[0] =1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <button_flag+0x1>
 420:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <button_flag>
	}
	if (!(PINC & (1<<PINC1)))
 424:	31 99       	sbic	0x06, 1	; 6
 426:	06 c0       	rjmp	.+12     	; 0x434 <__vector_4+0x2e>
	{
		button_flag[1] =1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <button_flag+0x3>
 430:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <button_flag+0x2>
	}
	if (!(PINC & (1<<PINC2)))
 434:	32 99       	sbic	0x06, 2	; 6
 436:	06 c0       	rjmp	.+12     	; 0x444 <__vector_4+0x3e>
	{
		button_flag[2] =1;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <button_flag+0x5>
 440:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <button_flag+0x4>
	}
	if (!(PINC & (1<<PINC3)))
 444:	33 99       	sbic	0x06, 3	; 6
 446:	06 c0       	rjmp	.+12     	; 0x454 <__vector_4+0x4e>
	{
		button_flag[3] =1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <button_flag+0x7>
 450:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <button_flag+0x6>
	}
}
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <main>:
enum state{state_wake, state_main, state_settings, state_debug,};
	
	
int main(void) {

	int state = state_wake; //every time the car or instrument cluster turns on, start at STATE_WAKE
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
				/*
				- Debugging mode?
				- On debugging exit, stateNum = 2 to go back to STATE_MAIN
				- break;
				*/
				state = state_main;
 466:	cc 24       	eor	r12, r12
 468:	c3 94       	inc	r12
 46a:	d1 2c       	mov	r13, r1
				- LCD controlled, change settings with buttons (if (buttonPressed) to toggle through and select in a menu)
				- Timeout in case driver accidentally hits button, maybe like 15 seconds -> stateNum = 2 to go back to STATE_MAIN
				- On settings exit, stateNum = 2 to go back to STATE_MAIN
				- break;
				*/
				state = state_debug;
 46c:	0f 2e       	mov	r0, r31
 46e:	f3 e0       	ldi	r31, 0x03	; 3
 470:	8f 2e       	mov	r8, r31
 472:	f0 2d       	mov	r31, r0
 474:	91 2c       	mov	r9, r1
		switch (state)
		{
			///////////////STATE_WAKE///////////////
			case state_wake: 
				//INITIALIZE BUTTON INTERRUPTS
				PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11); //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
 476:	0f 2e       	mov	r0, r31
 478:	fc e6       	ldi	r31, 0x6C	; 108
 47a:	ef 2e       	mov	r14, r31
 47c:	f1 2c       	mov	r15, r1
 47e:	f0 2d       	mov	r31, r0
				PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
 480:	08 e6       	ldi	r16, 0x68	; 104
 482:	10 e0       	ldi	r17, 0x00	; 0
				
				button_function_0();
				button_function_1();
				button_function_2();
				button_function_3();
				state = state_settings;
 484:	68 94       	set
 486:	aa 24       	eor	r10, r10
 488:	a1 f8       	bld	r10, 1
 48a:	b1 2c       	mov	r11, r1
 48c:	02 c0       	rjmp	.+4      	; 0x492 <main+0x30>
				- LCD controlled, change settings with buttons (if (buttonPressed) to toggle through and select in a menu)
				- Timeout in case driver accidentally hits button, maybe like 15 seconds -> stateNum = 2 to go back to STATE_MAIN
				- On settings exit, stateNum = 2 to go back to STATE_MAIN
				- break;
				*/
				state = state_debug;
 48e:	88 2d       	mov	r24, r8
 490:	99 2d       	mov	r25, r9

	int state = state_wake; //every time the car or instrument cluster turns on, start at STATE_WAKE

	while (1) 
	{
		switch (state)
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	91 05       	cpc	r25, r1
 496:	09 f4       	brne	.+2      	; 0x49a <main+0x38>
 498:	5e c0       	rjmp	.+188    	; 0x556 <main+0xf4>
 49a:	1c f4       	brge	.+6      	; 0x4a2 <main+0x40>
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	51 f0       	breq	.+20     	; 0x4b4 <main+0x52>
 4a0:	f8 cf       	rjmp	.-16     	; 0x492 <main+0x30>
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	91 05       	cpc	r25, r1
 4a6:	99 f3       	breq	.-26     	; 0x48e <main+0x2c>
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	91 05       	cpc	r25, r1
 4ac:	91 f7       	brne	.-28     	; 0x492 <main+0x30>
				/*
				- Debugging mode?
				- On debugging exit, stateNum = 2 to go back to STATE_MAIN
				- break;
				*/
				state = state_main;
 4ae:	8c 2d       	mov	r24, r12
 4b0:	9d 2d       	mov	r25, r13
 4b2:	ef cf       	rjmp	.-34     	; 0x492 <main+0x30>
		switch (state)
		{
			///////////////STATE_WAKE///////////////
			case state_wake: 
				//INITIALIZE BUTTON INTERRUPTS
				PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11); //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
 4b4:	f7 01       	movw	r30, r14
 4b6:	80 81       	ld	r24, Z
 4b8:	8f 60       	ori	r24, 0x0F	; 15
 4ba:	80 83       	st	Z, r24
				PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
 4bc:	f8 01       	movw	r30, r16
 4be:	80 81       	ld	r24, Z
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	80 83       	st	Z, r24
				sei(); //Enables interrupts by setting the global interrupt mask
 4c4:	78 94       	sei
								
				//INITIALIZE I2C and PWM Timer
				twi_init();
 4c6:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
				timer_Init(); 
 4ca:	0e 94 56 01 	call	0x2ac	; 0x2ac <timer_Init>
				
				//Blink RPM INDICATOR
				rpm_write(0x0); 
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 94 01 	call	0x328	; 0x328 <rpm_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	ff ef       	ldi	r31, 0xFF	; 255
 4d8:	25 ea       	ldi	r18, 0xA5	; 165
 4da:	8e e0       	ldi	r24, 0x0E	; 14
 4dc:	f1 50       	subi	r31, 0x01	; 1
 4de:	20 40       	sbci	r18, 0x00	; 0
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x7a>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <main+0x84>
 4e6:	00 00       	nop
				_delay_ms(300);
				rpm_write(0xFFFF);
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	0e 94 94 01 	call	0x328	; 0x328 <rpm_write>
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	e5 ea       	ldi	r30, 0xA5	; 165
 4f4:	fe e0       	ldi	r31, 0x0E	; 14
 4f6:	91 50       	subi	r25, 0x01	; 1
 4f8:	e0 40       	sbci	r30, 0x00	; 0
 4fa:	f0 40       	sbci	r31, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <main+0x94>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <main+0x9e>
 500:	00 00       	nop
				_delay_ms(300);
				
				//BLINK INDICATOR LEDS
				for (int i =0; i<2; i++)
 502:	c0 e0       	ldi	r28, 0x00	; 0
 504:	d0 e0       	ldi	r29, 0x00	; 0
				{
					rgb_set(i, BLUE);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	71 e0       	ldi	r23, 0x01	; 1
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rgb_set>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	85 ea       	ldi	r24, 0xA5	; 165
 514:	9e e0       	ldi	r25, 0x0E	; 14
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <main+0xb4>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0xbe>
 520:	00 00       	nop
					_delay_ms(300);
					rgb_set(i, RED);
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	71 e0       	ldi	r23, 0x01	; 1
 526:	ce 01       	movw	r24, r28
 528:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rgb_set>
 52c:	ef ef       	ldi	r30, 0xFF	; 255
 52e:	f5 ea       	ldi	r31, 0xA5	; 165
 530:	2e e0       	ldi	r18, 0x0E	; 14
 532:	e1 50       	subi	r30, 0x01	; 1
 534:	f0 40       	sbci	r31, 0x00	; 0
 536:	20 40       	sbci	r18, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0xd0>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0xda>
 53c:	00 00       	nop
					_delay_ms(300);
					rgb_set(i, BLUE);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	71 e0       	ldi	r23, 0x01	; 1
 542:	ce 01       	movw	r24, r28
 544:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rgb_set>
				_delay_ms(300);
				rpm_write(0xFFFF);
				_delay_ms(300);
				
				//BLINK INDICATOR LEDS
				for (int i =0; i<2; i++)
 548:	21 96       	adiw	r28, 0x01	; 1
 54a:	c2 30       	cpi	r28, 0x02	; 2
 54c:	d1 05       	cpc	r29, r1
 54e:	d9 f6       	brne	.-74     	; 0x506 <main+0xa4>
					rgb_set(i, RED);
					_delay_ms(300);
					rgb_set(i, BLUE);
				}
				
				state = state_main;
 550:	8c 2d       	mov	r24, r12
 552:	9d 2d       	mov	r25, r13
 554:	9e cf       	rjmp	.-196    	; 0x492 <main+0x30>
				- Record CAN Packet to SD Card
				- Update LCD/LEDs
				- Read for button press to change engine-state
				*/
				
				button_function_0();
 556:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_function_0>
				button_function_1();
 55a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <button_function_1>
				button_function_2();
 55e:	0e 94 ed 01 	call	0x3da	; 0x3da <button_function_2>
				button_function_3();
 562:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <button_function_3>
				state = state_settings;
 566:	8a 2d       	mov	r24, r10
 568:	9b 2d       	mov	r25, r11
				break;
 56a:	93 cf       	rjmp	.-218    	; 0x492 <main+0x30>

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
>>>>>>> b9cac8ece73d55e93f112cdffe9fb454686442e4
